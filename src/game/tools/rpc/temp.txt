public class {{$.Name}} extend
{	{{range $i, $t := $.Types}}{{with $n := index $.Values $i}}
	public {{$t}}{{if index $.Repeats $i}}[]{{end}} {{$n}}; // {{index $.Comments $i}}{{end}}{{end}}
	
	public void Decode(Packet pck)
	{	{{range $i, $t := $.Types}}{{with $n := index $.Values $i}}
		{{if index $.Repeats $i}}{{$n}} = new {{$t}}[pck.GetShort()];
		for (int i = 0; i < {{$n}}.Length; i++)
		{
			{{if $.IsWrap $t}}{{$n}}[i] = new {{$t}}();
			{{$n}}[i].Decode(pck);
			{{else}}{{$n}}[i] = pck.{{$.GetTSFunc $t true}}();{{end}}
		}
		{{else}}{{if $.IsWrap $t}}{{$n}} = new {{$t}}();
		{{$n}}.Decode(pck);
		{{else}}{{$n}} = pck.{{$.GetTSFunc $t true}}(); {{end}}{{end}}{{end}}{{end}}
	}
	
    public void Encode(Packet pck)
    {	{{range $i, $t := $.Types}}{{with $n := index $.Values $i}}
    	{{if index $.Repeats $i}}if ({{$n}} == null) pck.PutShort((short)0); 
    	else
    	{
        	pck.PutShort((short){{$n}}.Length);
        	for(int i = 0; i < {{$n}}.Length; i++)
        	{
        		{{if $.IsWrap $t}}{{$n}}[i].Encode(pck);
				{{else}}pck.{{$.GetTSFunc $t false}}({{$n}}[i]);{{end}}
        	}
        }
    	{{else}}{{if $.IsWrap $t}}{{$n}}.Encode(pck); {{else}}pck.{{$.GetTSFunc $t false}}({{$n}}); {{end}}{{end}}{{end}}{{end}}
    }
}
